#!/bin/bash

D=$(dirname $(readlink -f ${BASH_SOURCE}))
source "$D/setup_env.sh"

usage() {
cat << EOF
usage: $0 [<OPTIONS>]

Runs a multi-peer mesh re-join test.

OPTIONS:
   -h            Show this message.
   -m            Use meshkit (otherwise uses iw)
   -l            Use "mesh leave" for iw, for meshkit this does nothing
   -c <SERIAL>   Manually move a phone out of range, e.g. close rf chamber door
   -d            Try to 'fix' the rejoin problem by recreating the interface
   -p            Leave ping running in the background
   -t            Always use a "2nd" interface
   -r            Skip reboot

EXAMPLES:
   ./scripts/run_multi_rejoin -m
   ./scripts/run_multi_rejoin -l
   ./scripts/run_multi_rejoin       -c CB5A1TQ0WY
   ./scripts/run_multi_rejoin -d    -c CB5A1TQ0WY
   ./scripts/run_multi_rejoin -d -t -c CB5A1TQ0WY
   ./scripts/run_multi_rejoin    -t -c CB5A1TQ0WY
EOF
}

SECONDIFACE=
MESHKIT=
LEAVE=
CLOSETHEDOOR=
DELIFACE=
PINGBG=
SKIPREBOOT=

# parse the incoming parameters
while getopts "hmlc:dtpr" options; do
    case $options in
        h ) usage; exit 0;;
        m ) MESHKIT=1 ;;
        l ) LEAVE=1;;
        c ) CLOSETHEDOOR=$OPTARG;;
        d ) DELIFACE=1;;
        p ) PINGBG=1;;
        t ) SECONDIFACE=1;;
        r ) SKIPREBOOT=1;;
        * ) usage; exit 1;;
    esac
done

CHANNEL=7
HT="NO_HT"

if [[ -z $SKIPREBOOT ]]; then
    reboot_phones
    sleep_countdown 10
fi

adbs root
sleep_countdown 2

if [[ -n $CLOSETHEDOOR ]]; then
    serials=$(adbs shell getprop ro.serialno|grep -v $CLOSETHEDOOR)
    serial1=$CLOSETHEDOOR
    serial2=$(echo $serials | cut -d' ' -f1)
    serial3=$(echo $serials | cut -d' ' -f2)
else
    serials=$(adbs shell getprop ro.serialno)
    serial1=$(echo $serials | cut -d' ' -f1)
    serial2=$(echo $serials | cut -d' ' -f2)
    serial3=$(echo $serials | cut -d' ' -f3)
fi

if [[ -z $serial1 ]]; then
    echo "serial1 was empty"
    exit 1
fi
if [[ -z $serial2 ]]; then
    echo "serial2 was empty"
    exit 1
fi
if [[ -z $serial3 ]]; then
    echo "serial3 was empty"
    exit 1
fi

if [[ -n $MESHKIT ]]; then
    meshup=join_mesh_meshkit
else
    meshup=join_mesh
fi

if [[ -n $SECONDIFACE ]]; then
    $meshup $CHANNEL $HT $serial1 &>/dev/null
    $meshup $CHANNEL $HT $serial2 &>/dev/null
    $meshup $CHANNEL $HT $serial3 &>/dev/null
    adbs shell iw dev mesh0 del
    sleep_countdown 2
fi

ip1=$($meshup $CHANNEL $HT $serial1)
ip2=$($meshup $CHANNEL $HT $serial2)
ip3=$($meshup $CHANNEL $HT $serial3)

echo "Waiting for mesh to settle..."
sleep_countdown 5

if [[ -z $PINGBG ]]; then
    PING_OPT="-c5"
else
    PING_OPT="-i.2"
fi

echo_eval adb -s $serial1 shell "ping $PING_OPT $ip2 &>/dev/null" &
echo_eval adb -s $serial1 shell "ping $PING_OPT $ip3 &>/dev/null" &

echo_eval adb -s $serial2 shell "ping $PING_OPT $ip1 &>/dev/null" &
echo_eval adb -s $serial2 shell "ping $PING_OPT $ip3 &>/dev/null" &

echo_eval adb -s $serial3 shell "ping $PING_OPT $ip1 &>/dev/null" &
echo_eval adb -s $serial3 shell "ping $PING_OPT $ip2 &>/dev/null" &

if [[ -z $PINGBG ]]; then
    wait
fi

adbs shell iw dev mesh0 mpath dump

if [[ -n $MESHKIT ]]; then
    echo_eval adb -s $serial1 shell mesh mesh0 down
else
    if [[ -n $LEAVE ]]; then

        # TODO: This will cause the test to fail!
        echo_eval adb -s $serial1 shell iw dev mesh0 mesh leave

    elif [[ -n $CLOSETHEDOOR ]]; then
        echo
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo "!! MOVE $serial1 OUT OF RANGE !!"
        echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        echo

        echo "Press <enter> when done."
        read

        sleep_countdown 5

        echo "All of these ping commands should fail:"

        repeat=y
        while [[ $repeat == "y" ]]; do

            echo_eval adb -s $serial1 shell ping -c20 -f $ip2 &
            echo_eval adb -s $serial1 shell ping -c20 -f $ip3 &
            echo_eval adb -s $serial2 shell ping -c20 -f $ip1 &
            echo_eval adb -s $serial3 shell ping -c20 -f $ip1 &

            wait

            echo
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo "!! MOVE $serial1 IN RANGE, RECONNECT USB !!"
            echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            echo

            echo "Press <enter> when done (enter y to repeat ping)."
            read repeat
        done

        if [[ -z $DELIFACE ]]; then
            # Set this so it doesn't try to recreate the interface
            LEAVE=1
        else
            echo_eval adb -s $serial1 shell iw dev mesh0 del
        fi

    else
        echo_eval adb -s $serial1 shell iw dev mesh0 del
    fi
fi
sleep_countdown 5

$meshup $CHANNEL $HT $serial1 $LEAVE || die "joining mesh failed"
sleep_countdown 5

echo_eval adb -s $serial1 shell ping -c20 -f $ip2
echo_eval adb -s $serial1 shell ping -c20 -f $ip3

echo_eval adb -s $serial2 shell ping -c20 -f $ip1
echo_eval adb -s $serial2 shell ping -c20 -f $ip3

echo_eval adb -s $serial3 shell ping -c20 -f $ip1
echo_eval adb -s $serial3 shell ping -c20 -f $ip2

if [[ -n $PINGBG ]]; then
    echo_eval adbs shell killall ping
else
    wait
fi
